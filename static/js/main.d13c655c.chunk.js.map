{"version":3,"sources":["store/loading.ts","store/utils.ts","store/currentTodo.ts","store/index.ts","store/hooks.ts","api/api.ts","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["initialState","loading","actions","type","randomize","array","newArr","i","length","j","Math","floor","random","todos","todoStatus","selectedUser","userInfo","payload","filterByStatus","reducer","combineReducers","state","action","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useSelector","getData","url","fetch","then","response","json","requestTodos","a","data","getSelectedUser","id","Loader","className","TodoList","dispatch","useDispatch","useState","appliedQuery","setAppliedQuery","status","useEffect","loadingActions","result","currentTodoActions","applyQuery","useCallback","f","delay","timerId","clearTimeout","args","setTimeout","debounce","filteredTodos","filter","todo","title","toLowerCase","includes","trim","completed","placeholder","onChange","event","target","value","name","input","selectStatus","onClick","map","classNames","readOnly","userId","todoId","CurrentUser","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d13c655c.chunk.js","sourcesContent":["type StartLoadingAction = {\n  type: 'START_LOADING';\n};\n\ntype FinishLoadingAction = {\n  type: 'FINISH_LOADING';\n};\n\ntype Action = StartLoadingAction | FinishLoadingAction;\n\ntype State = {\n  loading: boolean;\n};\n\nconst initialState: State = {\n  loading: false,\n};\n\nexport const loadingReducer = (state = initialState, action: Action): State => {\n  switch (action.type) {\n    case 'START_LOADING':\n      return {\n        ...state,\n        loading: true,\n      };\n    case 'FINISH_LOADING':\n      return {\n        ...state,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  startLoading: (): StartLoadingAction => ({\n    type: 'START_LOADING',\n  }),\n\n  finishLoading: (): FinishLoadingAction => ({\n    type: 'FINISH_LOADING',\n  }),\n};\n","export function randomize(array: Todo[]) {\n  const newArr = [...array];\n\n  for (let i = newArr.length - 1; i > 0; i -= 1) {\n    const j = Math.floor(Math.random() * (i + 1));\n\n    [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n  }\n\n  return newArr;\n}\n","import { randomize } from './utils';\n\ntype GetTodos = {\n  type: 'GET_TODOS',\n  payload: Todo[],\n};\n\ntype SetTodoStatus = {\n  type: 'SET_TODO_STATUS',\n  payload: boolean | null,\n};\n\ntype SelectUser = {\n  type: 'SELECT_USER',\n  payload: number | null,\n};\n\ntype GetUserInfo = {\n  type: 'GET_USER_INFO',\n  payload: User\n};\n\ntype Randomize = {\n  type: 'RANDOMIZE',\n};\n\ntype Action = (\n  | GetTodos\n  | SetTodoStatus\n  | SelectUser\n  | GetUserInfo\n  | Randomize\n);\n\ntype State = {\n  todos: Todo[];\n  todoStatus: boolean | null,\n  selectedUser: number | null,\n  userInfo: User | null,\n};\n\nconst initialState: State = {\n  todos: [],\n  todoStatus: null,\n  selectedUser: null,\n  userInfo: null,\n};\n\nexport const currentTodoReducer\n= (state: State = initialState, action: Action): State => {\n  switch (action.type) {\n    case 'GET_TODOS':\n      return {\n        ...state,\n        todos: action.payload,\n      };\n\n    case 'SET_TODO_STATUS':\n      return {\n        ...state,\n        todoStatus: action.payload,\n      };\n\n    case 'SELECT_USER':\n      return {\n        ...state,\n        selectedUser: action.payload,\n      };\n\n    case 'GET_USER_INFO':\n      return {\n        ...state,\n        userInfo: action.payload,\n      };\n\n    case 'RANDOMIZE':\n      return {\n        ...state,\n        todos: randomize(state.todos),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  getTodos: (todos: Todo[]): GetTodos => ({\n    type: 'GET_TODOS',\n    payload: todos,\n  }),\n\n  setTodoStatus: (filterByStatus: boolean | null): SetTodoStatus => ({\n    type: 'SET_TODO_STATUS',\n    payload: filterByStatus,\n  }),\n\n  selectUser: (selectedUser: number | null): SelectUser => ({\n    type: 'SELECT_USER',\n    payload: selectedUser,\n  }),\n\n  getUserInfo: (userInfo: User): GetUserInfo => ({\n    type: 'GET_USER_INFO',\n    payload: userInfo,\n  }),\n\n  randomize: (): Randomize => ({\n    type: 'RANDOMIZE',\n  }),\n};\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { loadingReducer } from './loading';\nimport {\n  currentTodoReducer,\n} from './currentTodo';\n\nconst reducer = combineReducers({\n  loading: loadingReducer,\n  currentTodo: currentTodoReducer,\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport const store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootState } from './index';\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst getData = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json());\n};\n\nexport const requestTodos = async () => {\n  const data = await getData('/todos');\n\n  return data;\n};\n\nexport const getSelectedUser = async (id: number) => {\n  try {\n    const data = await getData(`/users/${id}`);\n\n    return data;\n  } catch (error) {\n    return null;\n  }\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => {\n  return (\n    <div className=\"loader-container\">\n      <div className=\"loader\" />\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport { actions as loadingActions } from '../../store/loading';\nimport { actions as currentTodoActions } from '../../store/currentTodo';\nimport { useAppSelector } from '../../store/hooks';\nimport { requestTodos } from '../../api/api';\n\nimport { Loader } from '../Loader/Loader';\n\ntype FuncArg = (v: string) => void;\n\nconst debounce = (f: FuncArg, delay: number) => {\n  let timerId: number;\n\n  return (...args: string[]) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...args);\n  };\n};\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const loading = useAppSelector(state => state.loading.loading);\n  const todos = useAppSelector(state => state.currentTodo.todos);\n  const status\n    = useAppSelector(state => state.currentTodo.todoStatus);\n  const selectedUser\n    = useAppSelector(state => state.currentTodo.selectedUser);\n\n  useEffect(() => {\n    dispatch(loadingActions.startLoading());\n\n    requestTodos()\n      .then(result => dispatch(currentTodoActions.getTodos(result)))\n      .then(() => dispatch(loadingActions.finishLoading()));\n  }, []);\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 500),\n    [],\n  );\n\n  const selectStatus = (input: string) => {\n    switch (input) {\n      case 'all':\n        dispatch(currentTodoActions.setTodoStatus(null));\n        break;\n      case 'completed':\n        dispatch(currentTodoActions.setTodoStatus(true));\n        break;\n      case 'active':\n        dispatch(currentTodoActions.setTodoStatus(false));\n        break;\n      default:\n    }\n  };\n\n  const selectUser\n    = (todoId: number) => dispatch(currentTodoActions.selectUser(todoId));\n\n  const randomizeTodos = () => dispatch(currentTodoActions.randomize());\n\n  let filteredTodos = todos\n    .filter(todo => (todo.title).toLowerCase()\n      .includes(appliedQuery.toLowerCase().trim()));\n\n  if (status !== null) {\n    filteredTodos = filteredTodos?.filter(todo => todo.completed === status);\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__filters\">\n        <label>\n          <input\n            data-cy=\"filterByTitle\"\n            className=\"TodoList__input input\"\n            type=\"text\"\n            placeholder=\"Filter by title\"\n            onChange={(event) => {\n              applyQuery(event.target.value);\n            }}\n          />\n        </label>\n\n        <label>\n          <select\n            name=\"select\"\n            className=\"TodoList__input select\"\n            onChange={(event) => selectStatus(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </label>\n\n        <button\n          type=\"button\"\n          className=\"button TodoList__input\"\n          onClick={() => randomizeTodos()}\n        >\n          Randomize\n        </button>\n      </div>\n\n      {loading\n        ? <Loader />\n        : (\n          <div className=\"TodoList__list-container\">\n            <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n              {filteredTodos.map(todo => (\n                <div key={todo.id}>\n                  <li\n                    className={classNames(\n                      'TodoList__item',\n                      { 'TodoList__item--unchecked': !todo.completed },\n                      { 'TodoList__item--checked': todo.completed },\n                    )}\n                  >\n                    <label>\n                      <input type=\"checkbox\" readOnly />\n                      <p>{todo.title}</p>\n                    </label>\n                    {todo.userId\n                      && (\n                        <button\n                          data-cy=\"userButton\"\n                          className={classNames(\n                            'TodoList__user-button button',\n                            {\n                              'TodoList__user-button--selected button':\n                                todo.userId === selectedUser,\n                            },\n                          )}\n                          type=\"button\"\n                          onClick={\n                            () => {\n                              selectUser(todo.userId);\n                            }\n                          }\n                        >\n                          {`User ${todo.userId}`}\n                        </button>\n                      )}\n                  </li>\n                </div>\n              ))}\n            </ul>\n          </div>\n        )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../store/hooks';\nimport { actions as currentTodoActions } from '../../store/currentTodo';\nimport { getSelectedUser } from '../../api/api';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedUser\n    = useAppSelector(state => state.currentTodo.selectedUser);\n  const userInfo = useAppSelector(state => state.currentTodo.userInfo);\n\n  useEffect(() => {\n    if (selectedUser) {\n      getSelectedUser(selectedUser)\n        .then(result => dispatch(currentTodoActions.getUserInfo(result)));\n    }\n  }, [selectedUser]);\n\n  const clearUser = () => {\n    dispatch(currentTodoActions.selectUser(0));\n  };\n\n  return (\n    <>\n      {userInfo\n        ? (\n          <>\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\">\n                <span>{`Selected user: ${selectedUser}`}</span>\n              </h2>\n\n              <h3\n                className=\"CurrentUser__name\"\n                data-cy=\"userName\"\n              >\n                {userInfo?.name}\n              </h3>\n              <p className=\"CurrentUser__email\">{userInfo?.email}</p>\n              <p className=\"CurrentUser__phone\">{userInfo?.phone}</p>\n            </div>\n\n            <button\n              type=\"button\"\n              onClick={() => clearUser()}\n              className=\"CurrentUser__clear button\"\n            >\n              Clear\n            </button>\n          </>\n        )\n        : <h3>No user data</h3>}\n    </>\n  );\n};\n","import { useAppSelector } from './store/hooks';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nexport const App = () => {\n  const selectedUser\n  = useAppSelector(state => state.currentTodo.selectedUser);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUser\n            ? (\n              <CurrentUser />\n            )\n            : <h3>No user selected</h3>}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}